@page "/activity"
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Components.Elements
@using TimerTracker.BE.Web.BusinessLogic.Models.DTOs

@* @inject IHttpClientFactory HttpClientFactory *@
@inherits BasePage

<style>
    div .main {
        display: flex;
        flex-direction: column;
        margin: 10px;
        width: 300px;
    }

    div .row {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
</style>

<h3>Activity</h3>
<div class="main">
    <div class="row">
        <div class="col-6">
            <h6>Type shift</h6>
            <MCombobox Items="_typeShifts" ItemText="item => item.Name" @bind-SelectedItem="@_selectTypeShift" />
        </div>
        <div class="col-6">
            <h6>Shifts</h6>
            <MCombobox Items="_shifts" ItemText="item => item.StartDate.ToLongDateString()" @bind-SelectedItem="@_selectShift" />
        </div>
    </div>
    <div class="row">
        <h6>Project</h6>
        <MCombobox Items="_projects" ItemText="item => item.Name" @bind-SelectedItem="@_selectProject" />
    </div>
    <div class="row">
        <h6>Sub module</h6>
        <MCombobox Items="_subModules" ItemText="item => item.Name" @bind-SelectedItem="@_selectSubModule" />
    </div>
    <div class="row">
        <h6>Description</h6>
        <MTextArea @bind-Value="@_descriptionText" />

    </div>
    <button @onclick="save">Set</button>
</div>

@code {
    private string _descriptionText = string.Empty;

    private Task OnValueChanged(string newValue)
    {
        _descriptionText = newValue;
        StateHasChanged();  // Aktualizuje komponentu
        return Task.CompletedTask;
    }

    private TypeShiftBaseDto? _selectTypeShift { get; set; }
    private ShiftBaseDto? _selectShift { get; set; }
    private ProjectBaseDto? _selectProject { get; set; }
    private SubModuleBaseDto? _selectSubModule { get; set; }

    private List<TypeShiftBaseDto>? _typeShifts;
    private List<ShiftBaseDto>? _shifts;
    private List<ProjectBaseDto>? _projects;
    private List<SubModuleBaseDto>? _subModules;



    protected async override Task OnInitializedAsync()
    {
        try
        {
            // var client = HttpClientFactory.CreateClient("TimeTrackerAPI");
            var typeShiftsReq = await _httpClient.GetFromJsonAsync<List<TypeShiftBaseDto>>("/api/v1/shifts/types");
            if (typeShiftsReq != null)
                _typeShifts = typeShiftsReq;

            var shiftsReq = await _httpClient.GetFromJsonAsync<List<ShiftBaseDto>>("/api/v1/shifts");
            if (shiftsReq != null)
                _shifts = shiftsReq;

            var projectsReq = await _httpClient.GetFromJsonAsync<List<ProjectBaseDto>>("/api/v1/projects");
            if (projectsReq != null)
                _projects = projectsReq;

            var subModulesReq = await _httpClient.GetFromJsonAsync<List<SubModuleBaseDto>>("/api/v1/projects/submodules");
            if (subModulesReq != null)
                _subModules = subModulesReq;
        }
        catch (Exception ex)
        {

        }
    }

    private async void save()
    {
        var redcortActivity = new RecordActivityInsertDto
            {
                Description = _descriptionText,
                ProjectId = _selectProject?.Id ?? 0,
                SubModuleId = _selectSubModule?.Id ?? 0,
                ShiftGuidId = _selectShift?.GuidId ?? Guid.Empty,
                TypeShiftId = _selectTypeShift?.Id ?? 0
            };
        var result = await _httpClient.PostAsJsonAsync<RecordActivityInsertDto>("/api/v1/record-activities", redcortActivity);

        if (result.IsSuccessStatusCode)
        {

        }
        else
        {

        }
    }
}
