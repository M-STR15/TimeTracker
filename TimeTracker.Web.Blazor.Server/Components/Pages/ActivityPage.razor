@page "/activity"
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Components.Elements
@using TimerTracker.BE.Web.BusinessLogic.Models.DTOs

@inject IHttpClientFactory HttpClientFactory

<style>
    div .main {
        display: flex;
        flex-direction: column;
        margin: 10px;
        width: 300px;
    }

    div .row {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
</style>

<h3>Activity</h3>
<div class="main">
    <div class="row">
        <div class="col-6">
            <h6>Type shift</h6>
            <MCombobox Items="typeShifts" ItemText="item => item.Name" @bind-SelectedItem="@select1" />
        </div>
        <div class="col-6">
            <h6>Shifts</h6>
            <MCombobox Items="typeShifts" ItemText="item => item.Name" />
        </div>
    </div>
    <div class="row">
        <h6>Project</h6>
        <MCombobox Items="typeShifts" ItemText="item => item.Name" />
    </div>
    <div class="row">
        <h6>Sub module</h6>
        <MCombobox Items="typeShifts" ItemText="item => item.Name" />
    </div>
    <div class="row">
        <h6>Description</h6>
        <MTextArea Value="@descriptionText" />

    </div>
    <button>Set</button>
</div>

@code {
    private string descriptionText;

    private Task OnValueChanged(string newValue)
    {
        descriptionText = newValue;
        StateHasChanged();  // Aktualizuje komponentu
        return Task.CompletedTask;
    }

    private TypeShiftBaseDto select1 { get; set; }

    private List<TypeShiftBaseDto> typeShifts = new List<TypeShiftBaseDto>
    {
        new TypeShiftBaseDto() { Id = 1, Name = "Item 1" },
        new TypeShiftBaseDto() { Id = 2, Name = "Item 2" },
        new TypeShiftBaseDto() { Id = 3, Name = "Item 3" },
    };


    // protected async override void OnInitialized()
    // {
    //     descriptionText = "Description";
    //     // typeShifts = await Http.GetFromJsonAsync<List<Activity>>("https://api.example.com/activities");
    // }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("TimeTrackerAPI");
            var typeShiftsReq = await client.GetFromJsonAsync<List<TypeShiftBaseDto>>("/api/v1/shift/types");
            if (typeShifts != null)
            {
                typeShifts = typeShiftsReq;
            }
        }
        catch (Exception ex)
        {

        }
    }
}
