@page "/settings"

@using TimeTracker.Web.Blazor.Server.Components.Elements
@using TimeTracker.Web.Blazor.Server.Modals
@using TimeTracker.Web.Blazor.Server.Models
@using TimerTracker.BE.Web.BusinessLogic.Models.DTOs

@inherits BasePage

<style>
    container {
        display: flex;
        flex-direction: column;
        gap: 20px; /* Vzdálenost mezi sekcemi */
    }
</style>

<h3>Settings</h3>

<div class="container">
    <div id="project">
        <h4>Projects</h4>
        <div id="menuButtonsProject">
            <MButton OnClick="ShowModalAddProject">Add</MButton>
            <MButton OnClick="ShowModalEditProject">Edit</MButton>
            <MButton OnClick="ShowModalDeleteProject">Delete</MButton>

        </div>
        <div>
            <MTable Rows="_projects" Columns="_projectColumns" />
        </div>
    </div>
    <div id="submodule">
        <h4>SubModules</h4>
        <div id="submoduleButtonsProject">
            <MButton OnClick="ShowModalAddSubmodule">Add</MButton>
            <MButton OnClick="ShowModalEditSubmodule">Edit</MButton>
            <MButton OnClick="ShowModalDeleteSubmodule">Delete</MButton>
        </div>
        <div>
            <MTable Rows="_subModules" Columns="_subModuleColumns" />
        </div>
    </div>
</div>

<AddOrEditProjectModal Title="Add project"
                       @bind-Visible="IsOpenAddProjectModal">
</AddOrEditProjectModal>

<AddOrEditSubModuletModal Title="Add submodule"
                          @bind-Visible="IsOpenAddSubModuleModal">
</AddOrEditSubModuletModal>


@code {
    private List<ProjectBaseDto> _projects;
    private List<TableColumnDefinition<ProjectBaseDto>>? _projectColumns;

    private List<SubModuleBaseDto> _subModules;
    private List<TableColumnDefinition<SubModuleBaseDto>>? _subModuleColumns;

    public bool IsOpenAddProjectModal { get; set; } = false;
    public bool IsOpenAddSubModuleModal { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {

        _projectColumns = CreateTableColumnDefinition_Project();
        _subModuleColumns = CreateTableColumnDefinition_SubModuleBaseDto();

        var projects = await _httpClient.GetFromJsonAsync<List<ProjectBaseDto>>("/api/v1/projects");
        if (projects != null)
            _projects = projects;

        var subModules = await _httpClient.GetFromJsonAsync<List<SubModuleBaseDto>>("/api/v1/projects/submodules");
        if (subModules != null)
            _subModules = subModules;
        await base.OnInitializedAsync();
    }

    private void ShowModalAddProject()
    {
        IsOpenAddProjectModal = true;
    }

    private void ShowModalEditProject()
    {
        // _modalService.ShowModal<EditProjectModal>("Edit Project", 400, 200);
    }

    private void ShowModalDeleteProject()
    {
        // _modalService.ShowModal<DeleteProjectModal>("Delete Project", 400, 200);
    }

    private void ShowModalAddSubmodule()
    {
        IsOpenAddSubModuleModal = true;
    }

    private void ShowModalEditSubmodule()
    {
        // _modalService.ShowModal<EditProjectModal>("Edit Project", 400, 200);
    }

    private void ShowModalDeleteSubmodule()
    {
        // _modalService.ShowModal<DeleteProjectModal>("Delete Project", 400, 200);
    }

    public static List<TableColumnDefinition<ProjectBaseDto>> CreateTableColumnDefinition_Project()
    {
        return new List<TableColumnDefinition<ProjectBaseDto>>
                {
                    new TableColumnDefinition<ProjectBaseDto>
                    {
                        Header = "Name",
                        Key = nameof(ProjectBaseDto.Name),
                        Width=150,
                        eTypeColumn=eTypeColumn.Text
                    },
                };
    }

    public static List<TableColumnDefinition<SubModuleBaseDto>> CreateTableColumnDefinition_SubModuleBaseDto()
    {
        return new List<TableColumnDefinition<SubModuleBaseDto>>
                {
                    new TableColumnDefinition<SubModuleBaseDto>
                    {
                        Header = "Name",
                        Key = nameof(ProjectBaseDto.Name),
                        Width=150,
                        eTypeColumn=eTypeColumn.Text
                    },
                };
    }
}
