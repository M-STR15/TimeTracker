@page "/current-activity"
@using AutoMapper
@using TimeTracker.BE.Web.BusinessLogic.Models.DTOs
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Modals
@using TimeTracker.Web.Blazor.Server.Models
@using TimeTracker.Web.Blazor.Server.Components.Pages.Components.CurrentActivityPage

@inherits BasePage
@inject IMapper _mapper

<div class="v-gap">

    <div>
        <MButton Text="Change" OnClick="onOpenAddActvityModal" Style="width:150px"></MButton>
        <MButton Text="Pause" Style="width:150px"></MButton>
        <MButton Text="End of shift" Style="width:150px"></MButton>
    </div>

    @if (_lastRecordActivity == null)
    {
        <MLoader />
    }
    else
    {
        <InfoBoard _lastRecordActivity="_lastRecordActivity" _totalTime="_totalTime" />
    }

</div>

<AddActivityModal Title="Change activity"
                  @bind-Visible="_isOpenAddActivityModal"
                  @key="_isOpenAddActivityModal"
                  OnModalClosed="onAfterCloseModalAddActivity_Changed" />
@code {
    private bool _isOpenAddActivityModal;
    private void onOpenAddActvityModal() => _isOpenAddActivityModal = true;
    private RecordListViewModel? _lastRecordActivity;
    private TotalTimesViewModel? _totalTime;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            if (_httpClient != null)
            {
                var urlApiLastRecordActivity = "/api/v1/last-record-activity";
                var urlApiTotalTime = "/api/v1/reports/total-times";
                // var lastRecordActivity = await _httpClient.GetFromJsonAsync<RecordActivityDetailDto>(urlApiLastRecordActivity);
                // var totalTimeDto = await _httpClient.GetFromJsonAsync<TotalTimesDto>(urlApiTotalTime);

                var responsevLastRecordActivity = await _httpClient.GetAsync(urlApiLastRecordActivity);
                var responsevApiTotalTime = await _httpClient.GetAsync(urlApiTotalTime);

                if (responsevLastRecordActivity.IsSuccessStatusCode && responsevApiTotalTime.IsSuccessStatusCode)
                {
                    // Status 200 OK
                    var recordActivityDetailDto = await responsevLastRecordActivity.Content.ReadFromJsonAsync<RecordActivityDetailDto>();
                    var totalTimesDto = await responsevApiTotalTime.Content.ReadFromJsonAsync<TotalTimesDto>();
                    if (recordActivityDetailDto != null && totalTimesDto != null)
                        setObjects(recordActivityDetailDto, totalTimesDto);
                }
                else if (responsevLastRecordActivity.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    // Status 404 Not Found
                    _toastNotificationService.AddNotification(FE.Web.Components.Models.eNotificationType.Info, "Not Found", "Data nebyla nalezena.");
                }
                else if (responsevLastRecordActivity.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    // Status 400 Bad Request
                    _toastNotificationService.AddNotification(FE.Web.Components.Models.eNotificationType.Warning, "Bad Request", "Chybný požadavek.");
                }
                else
                {
                    // Ostatní chyby
                    // Console.WriteLine($"Chyba: {(int)response.StatusCode} - {response.ReasonPhrase}");
                    _toastNotificationService.AddNotification(FE.Web.Components.Models.eNotificationType.Error, "Error", "Chybný požadavek.");
                }


            }
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            _eventLogService?.LogError(Guid.Parse("d58ce7fb-9d3e-4947-82a6-346a78d3a4d3"), ex);
        }

    }

    private void setObjects(RecordActivityDetailDto lastRecordActivity, TotalTimesDto totalTimeDto)
    {
        _totalTime = _mapper.Map<TotalTimesViewModel>(totalTimeDto);
        _lastRecordActivity = _mapper.Map<RecordListViewModel>(lastRecordActivity);

    }


    private void onAfterCloseModalAddActivity_Changed()
    {


    }

}
