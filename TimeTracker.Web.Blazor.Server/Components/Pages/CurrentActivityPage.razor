@page "/current-activity"
@using AutoMapper
@using TimeTracker.BE.Web.BusinessLogic.Models.DTOs
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Modals
@using TimeTracker.Web.Blazor.Server.Models
@using TimeTracker.Web.Blazor.Server.Components.Pages.Components.CurrentActivityPage

@inherits BasePage
@inject IMapper _mapper

<div class="v-gap">

    <div>
        <MButton Text="Change" OnClick="onOpenAddActvityModal" Style="width:150px"></MButton>
        <MButton Text="Pause" Style="width:150px"></MButton>
        <MButton Text="End of shift" Style="width:150px"></MButton>
    </div>

    @if (_lastRecordActivity == null)
    {
        <MLoader />
    }
    else
    {
        <InfoBoard _lastRecordActivity="_lastRecordActivity" _totalTime="_totalTime" />
    }

</div>

<AddActivityModal Title="Change activity"
                  @bind-Visible="_isOpenAddActivityModal"
                  @key="_isOpenAddActivityModal"
                  OnModalClosed="onAfterCloseModalAddActivity_Changed" />
@code {
    private bool _isOpenAddActivityModal;
    private void onOpenAddActvityModal() => _isOpenAddActivityModal = true;
    private RecordListViewModel? _lastRecordActivity;
    private TotalTimesViewModel? _totalTime;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var urlApi = "/api/v1/last-record-activity";

            if (_httpClient != null)
            {
                var lastRecordActivity = await _httpClient.GetFromJsonAsync<RecordActivityDetailDto>(urlApi);
                var urlApiTotalTime = "/api/v1/reports/total-times";
                var totalTimeDto = await _httpClient.GetFromJsonAsync<TotalTimesDto>(urlApiTotalTime);
                _totalTime = _mapper.Map<TotalTimesViewModel>(totalTimeDto);
                _lastRecordActivity = _mapper.Map<RecordListViewModel>(lastRecordActivity);
            }
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            _eventLogService?.LogError(Guid.Parse("d58ce7fb-9d3e-4947-82a6-346a78d3a4d3"), ex);
        }
    
    }


    private void onAfterCloseModalAddActivity_Changed()
    {


    }

}
