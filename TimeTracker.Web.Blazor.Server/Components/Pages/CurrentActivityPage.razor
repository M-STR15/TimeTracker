@page "/current-activity"
@using AutoMapper
@using TimeTracker.BE.Web.BusinessLogic.Models.DTOs
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Modals
@using TimeTracker.Web.Blazor.Server.Models

@inherits BasePage
@inject IMapper _mapper

<style>
    table {
        border-collapse: collapse;
        width: auto;
    }

    td, th {
        border: 1px solid black;
        padding: 8px;
        text-align: center;
    }

    .col-1 {
        width: 30%;
    }

    .col-2 {
        width: 40%;
    }

    .col-3 {
        width: 30%;
    }

    table {
        table-layout: fixed;
        width: 450px;
    }
</style>

<div>
    <MButton Text="Change" OnClick="onOpenAddActvityModal" Style="width:150px"></MButton>
    <MButton Text="Pause" Style="width:150px"></MButton>
    <MButton Text="End of shift" Style="width:150px"></MButton>
</div>

@if (_lastRecordActivity == null)
{
    <MLoader />
}
else
{
    <table>
        <tr>
            <th colspan="3">Last setting</th>
        </tr>
        <tr>
            <th class="col-1">Date shift</th>
            <th class="col-2">Activity</th>
            <th class="col-3">Time</th>
        </tr>
        <tr>
            <td class="col-1">@(_lastRecordActivity.ShiftDateStr)</td>
            <td class="col-2">@(_lastRecordActivity?.ActivityName ?? "")</td>
            <td class="col-3">@(_lastRecordActivity?.Time ?? "")</td>
        </tr>
        <tr>
            <th class="col-1">Project</th>
            <th class="col-2">Submodule</th>
            <th class="col-3">Act. time</th>
        </tr>
        <tr>
            <td class="col-1">@(_lastRecordActivity?.ProjectName ?? "")</td>
            <td class="col-2">@(_lastRecordActivity?.SubModuleName ?? "")</td>
            <td class="col-3">@(_lastRecordActivity?.StartDateTime.ToString("dd.MM.yyyy HH:mm:ss") ?? "")</td>
        </tr>
    </table>

    <table>
        <tr>
            <th colspan="3">Total time</th>
        </tr>
        <tr>
            <th class="col-1"></th>
            <th class="col-2">Today</th>
            <th class="col-3">In shift</th>
        </tr>
        <tr>
            <th class="col-1">Work</th>
            <td class="col-2">@_totalTime.WorkTimeStr</td>
            <td class="col-3">@_totalTime.WorkShiftTimeStr</td>
        </tr>
        <tr>
            <th class="col-1">Pause</th>
            <td class="col-2">@_totalTime.PauseTimeStr</td>
            <td class="col-3">@_totalTime.PauseShiftTimeStr</td>
        </tr>
        <tr>
            <th class="col-1">Total</th>
            <td class="col-2">@_totalTime.TotalTimeStr</td>
            <td class="col-3">@_totalTime.TotalShiftTimeStr</td>
        </tr>
    </table>
}

<AddActivityModal Title="Change activity"
                  @bind-Visible="_isOpenAddActivityModal"
                  OnModalClosed="onAfterCloseModalAddActivity_Changed" />
@code {
    private bool _isOpenAddActivityModal;
    private void onOpenAddActvityModal() => _isOpenAddActivityModal = true;
    private RecordListViewModel? _lastRecordActivity;
    private bool isRunning = true;
    private TotalTimesViewModel? _totalTime;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var urlApi = "/api/v1/last-record-activity";
            var lastRecordActivity = await _httpClient.GetFromJsonAsync<RecordActivityDetailDto>(urlApi);
            var urlApiTotalTime = "/api/v1/reports/total-times";
            var totalTime = await _httpClient.GetFromJsonAsync<TotalTimesDto>(urlApiTotalTime);
            _totalTime = _mapper.Map<TotalTimesViewModel>(totalTime);
            _lastRecordActivity = _mapper.Map<RecordListViewModel>(lastRecordActivity);
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            _eventLogService.LogError(Guid.Parse("d58ce7fb-9d3e-4947-82a6-346a78d3a4d3"), ex);
        }
        try
        {
            var timer = new PeriodicTimer(TimeSpan.FromSeconds(1)); // každé 2 sekundy
            if (_totalTime != null)
            {
                while (await timer.WaitForNextTickAsync() && isRunning)
                {
                    _totalTime.Update();
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            _eventLogService.LogError(Guid.Parse("0971010b-7fc3-4840-9c4b-14287fac3e8c"), ex);
        }
    }

    //   private RecordActivity? _lastRecordActivity
    // {
    // 	get => _lra;
    // 	set
    // 	{
    // 		_lra = value;
    // 	}
    // }

    private void onAfterCloseModalAddActivity_Changed()
    {


    }

    public void Dispose()
    {
        isRunning = false;
    }

}
