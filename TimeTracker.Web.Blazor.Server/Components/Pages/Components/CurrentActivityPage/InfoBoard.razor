@using TimeTracker.Web.Blazor.Server.Models
@using TimeTracker.BE.Web.Shared.Services

<table>
    <tr>
        <th colspan="3">Last setting</th>
    </tr>
    <tr>
        <th class="col-1">Date shift</th>
        <th class="col-2">Activity</th>
        <th class="col-3">Time</th>
    </tr>
    <tr>
        <td class="col-1">@(LastRecordActivity?.ShiftDateStr)</td>
        <td class="col-2">@(LastRecordActivity?.ActivityName ?? "")</td>
        <td class="col-3">@(LastRecordActivity?.Time ?? "")</td>
    </tr>
    <tr>
        <th class="col-1">Project</th>
        <th class="col-2">Submodule</th>
        <th class="col-3">Act. time</th>
    </tr>
    <tr>
        <td class="col-1">@(LastRecordActivity?.ProjectName ?? "")</td>
        <td class="col-2">@(LastRecordActivity?.SubModuleName ?? "")</td>
        <td class="col-3">@(LastRecordActivity?.StartDateTime.ToString("dd.MM.yyyy HH:mm:ss") ?? "")</td>
    </tr>
</table>

<table>
    <tr>
        <th colspan="3">Total time</th>
    </tr>
    <tr>
        <th class="col-1"></th>
        <th class="col-2">Today</th>
        <th class="col-3">In shift</th>
    </tr>
    <tr>
        <th class="col-1">Work</th>
        <td class="col-2">@TotalTime?.WorkTimeStr</td>
        <td class="col-3">@TotalTime?.WorkShiftTimeStr</td>
    </tr>
    <tr>
        <th class="col-1">Pause</th>
        <td class="col-2">@TotalTime?.PauseTimeStr</td>
        <td class="col-3">@TotalTime?.PauseShiftTimeStr</td>
    </tr>
    <tr>
        <th class="col-1">Total</th>
        <td class="col-2">@TotalTime?.TotalTimeStr</td>
        <td class="col-3">@TotalTime?.TotalShiftTimeStr</td>
    </tr>
</table>

@code {
    [Parameter]
    public TotalTimesViewModel? TotalTime { get; set; }
    [Parameter]
    public RecordListViewModel? LastRecordActivity { get; set; }
    [Inject]
    protected IEventLogService? _eventLogService { get; set; }
    private bool isRunning = true;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var timer = new PeriodicTimer(TimeSpan.FromSeconds(1)); // každé 1 sekundy
            if (TotalTime != null)
            {
                while (await timer.WaitForNextTickAsync() && isRunning)
                {
                    TotalTime.Update();
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            _eventLogService?.LogError(Guid.Parse("0971010b-7fc3-4840-9c4b-14287fac3e8c"), ex);
        }
    }


    public void Dispose()
    {
        isRunning = false;
    }
}