@page "/activity"
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Components.Elements
@using TimerTracker.BE.Web.BusinessLogic.Models.DTOs

@* @inject IHttpClientFactory HttpClientFactory *@
@inherits BasePage

<style>
    div .main {
        display: flex;
        flex-direction: column;
        margin: 10px;
        width: 300px;
    }

    div .row {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
</style>

<h3>Add activity</h3>
<div class="main">
    <div class="row">
        <div class="col-6">
            <h6>Type shift</h6>
            <MCombobox Items="_typeShifts" ItemText="item => item.Name" OnChange="OnTypeShiftChanged" />
            @if (_errorMessages.Contains("TypeShift"))
            {
                <div class="error-message">Please select a valid type shift.</div>
            }
        </div>
        <div class="col-6">
            <h6>Shifts</h6>
            <MCombobox Items="_shifts" ItemText="item => item.StartDate.ToLongDateString()" OnChange="OnShiftChanged" />
        </div>
    </div>
    <div class="row">
        <h6>Project</h6>
        <MCombobox Items="_projects" ItemText="item => item.Name" OnChange="OnProjectChanged" />
    </div>
    <div class="row">
        <h6>Sub module</h6>
        <MCombobox Items="_subModules" ItemText="item => item.Name" OnChange="OnSubModuleChanged" />
    </div>
    <div class="row">
        <h6>Description</h6>
        <MTextArea @bind-Value="@_descriptionText" />
    </div>
    <button @onclick="save_Click">Set</button>
</div>

@code {
    private List<string> _errorMessages = new List<string>();

    private string _descriptionText = string.Empty;

    private void OnTypeShiftChanged(ChangeEventArgs e)
    {
        if (e.Value is TypeShiftBaseDto item)
            _recordActivityInsertDto.TypeShiftId = item?.Id;
    }

    private void OnShiftChanged(ChangeEventArgs e)
    {
        if (e.Value is ShiftBaseDto item)
            _recordActivityInsertDto.ShiftGuidId = item?.GuidId;
    }

    private void OnProjectChanged(ChangeEventArgs e)
    {
        if (e.Value is ProjectBaseDto item)
            _recordActivityInsertDto.ProjectId = item?.Id;
    }

    private void OnSubModuleChanged(ChangeEventArgs e)
    {
        if (e.Value is SubModuleBaseDto item)
            _recordActivityInsertDto.SubModuleId = item?.Id;
    }

    private Task OnValueChanged(string newValue)
    {
        _descriptionText = newValue;
        StateHasChanged();  // Aktualizuje komponentu
        return Task.CompletedTask;
    }

    private List<TypeShiftBaseDto>? _typeShifts;
    private List<ShiftBaseDto>? _shifts;
    private List<ProjectBaseDto>? _projects;
    private List<SubModuleBaseDto>? _subModules;

    private RecordActivityInsertDto _recordActivityInsertDto = new();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            // var client = HttpClientFactory.CreateClient("TimeTrackerAPI");
            var typeShiftsReq = await _httpClient.GetFromJsonAsync<List<TypeShiftBaseDto>>("/api/v1/shifts/types");
            if (typeShiftsReq != null)
                _typeShifts = typeShiftsReq;

            var shiftsReq = await _httpClient.GetFromJsonAsync<List<ShiftBaseDto>>("/api/v1/shifts");
            if (shiftsReq != null)
                _shifts = shiftsReq;

            var projectsReq = await _httpClient.GetFromJsonAsync<List<ProjectBaseDto>>("/api/v1/projects");
            if (projectsReq != null)
                _projects = projectsReq;

            var subModulesReq = await _httpClient.GetFromJsonAsync<List<SubModuleBaseDto>>("/api/v1/projects/submodules");
            if (subModulesReq != null)
                _subModules = subModulesReq;
        }
        catch (Exception ex)
        {

        }
    }

    private async void save_Click()
    {
        var result = await _httpClient.PostAsJsonAsync<RecordActivityInsertDto>("api/v1/record-activities", _recordActivityInsertDto);

        if (result.IsSuccessStatusCode)
        {

        }
        else
        {

        }
    }
}
