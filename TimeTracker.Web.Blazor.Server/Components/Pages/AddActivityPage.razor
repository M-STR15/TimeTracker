@page "/activity"
@using TimeTracker.BE.DB.Models.Enums
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Components.Elements
@using TimerTracker.BE.Web.BusinessLogic.Models.DTOs

@* @inject IHttpClientFactory HttpClientFactory *@
@inherits BasePage

<style>
    div .main {
        display: flex;
        flex-direction: column;
        margin: 10px;
        width: 300px;
    }

    div .row {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }
</style>

<h3>Add activity</h3>
<EditForm Model="@editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="main">
        <div class="row">
            <div class="col-6">
                <h6>Type shift</h6>
                <MCombobox Items="_typeShifts" ItemText="item => item.Name" OnChange="OnTypeShiftChanged" />
                <ValidationMessage For="@(() => _recordActivityInsertDto.TypeShiftId)" />
            </div>
            <div class="col-6">
                <h6>Shifts</h6>
                <MCombobox Items="_shifts" ItemText="item => item.StartDate.ToLongDateString()" OnChange="OnShiftChanged" />
                <ValidationMessage For="@(() => _recordActivityInsertDto.ShiftGuidId)" />
            </div>
        </div>
        <div class="row">
            <h6>Project</h6>
            <MCombobox Items="_projects" ItemText="item => item.Name" OnChange="OnProjectChanged" />
            <ValidationMessage For="@(() => _recordActivityInsertDto.ProjectId)" />
        </div>
        <div class="row">
            <h6>Sub module</h6>
            <MCombobox Items="_subModules" ItemText="item => item.Name" OnChange="OnSubModuleChanged" />
            <ValidationMessage For="@(() => _recordActivityInsertDto.SubModuleId)" />
        </div>
        <div class="row">
            <h6>Description</h6>
            <MTextArea @bind-Value="@_recordActivityInsertDto.Description" />
        </div>
        <MButton IsDisabled="@(!editContext.Validate())" OnClick="HandleValidSubmit">Save</MButton>
    </div>
</EditForm>

@code {

    private EditContext editContext;

    private List<TypeShiftBaseDto>? _typeShifts;
    private List<ShiftBaseDto>? _shifts;
    private List<ProjectBaseDto>? _projects;
    private List<SubModuleBaseDto>? _subModules;

    private bool isDisable => editContext.Validate();

    private RecordActivityInsertDto _recordActivityInsertDto = new();

    private bool isFormValid => _recordActivityInsertDto.TypeShiftId != null;

    private List<string> _errorMessages = new();

    private void OnTypeShiftChanged(ChangeEventArgs e)
    {
        if (e.Value is TypeShiftBaseDto item)
            _recordActivityInsertDto.TypeShiftId = item?.Id;
    }

    private void OnShiftChanged(ChangeEventArgs e)
    {
        if (e.Value is ShiftBaseDto item)
            _recordActivityInsertDto.ShiftGuidId = item?.GuidId;
    }

    private void OnProjectChanged(ChangeEventArgs e)
    {
        if (e.Value is ProjectBaseDto item)
            _recordActivityInsertDto.ProjectId = item?.Id;
    }

    private void OnSubModuleChanged(ChangeEventArgs e)
    {
        if (e.Value is SubModuleBaseDto item)
            _recordActivityInsertDto.SubModuleId = item?.Id;
    }

    private Task OnValueChanged(string newValue)
    {
        _recordActivityInsertDto.Description = newValue;
        StateHasChanged();  // Aktualizuje komponentu
        return Task.CompletedTask;
    }



    protected async override Task OnInitializedAsync()
    {
        try
        {
            editContext = new EditContext(_recordActivityInsertDto);
            editContext.OnFieldChanged += onFieldChange;

            // var client = HttpClientFactory.CreateClient("TimeTrackerAPI");
            var typeShiftsReq = await _httpClient.GetFromJsonAsync<List<TypeShiftBaseDto>>("/api/v1/shifts/types");
            if (typeShiftsReq != null)
                _typeShifts = typeShiftsReq;

            var shiftsReq = await _httpClient.GetFromJsonAsync<List<ShiftBaseDto>>("/api/v1/shifts");
            if (shiftsReq != null)
                _shifts = shiftsReq;

            var projectsReq = await _httpClient.GetFromJsonAsync<List<ProjectBaseDto>>("/api/v1/projects");
            if (projectsReq != null)
                _projects = projectsReq;

            var subModulesReq = await _httpClient.GetFromJsonAsync<List<SubModuleBaseDto>>("/api/v1/projects/submodules");
            if (subModulesReq != null)
                _subModules = subModulesReq;

            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }

    private void onFieldChange(object sender, EventArgs args)
    {
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        _recordActivityInsertDto.StartDateTime = DateTime.Now;
        _recordActivityInsertDto.ActivityId = (int)eActivity.Start;
        var result = await _httpClient.PostAsJsonAsync<RecordActivityInsertDto>("api/v1/record-activities", _recordActivityInsertDto);

        if (result.IsSuccessStatusCode)
        {

        }
        else
        {

        }
    }
}
