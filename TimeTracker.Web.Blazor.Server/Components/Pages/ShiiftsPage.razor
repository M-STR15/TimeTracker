@page "/shifts"
@using System.Globalization
@using TimeTracker.BE.Web.BusinessLogic.Models.DTOs
@using TimeTracker.Web.Blazor.Server.Components.Elements
@using TimeTracker.Web.Blazor.Server.Models

@inherits BasePage

<style>
    .container2 {
        display: flex;
        justify-content: flex-start;
    }

</style>

<h3>ShiftsPage</h3>
<div>
    <div>
        <label>Month:</label>
        <MCombobox Items="_monthAndYears" @bind-SelectedItem="SelectMonthAndYear" ItemText="item => item.ToString()" />
    </div>
    <div class="container2">
        <label>Set type:</label>
        <div>
            @if (_typeShifts != null)
            {
                <MRadioGroup TItem="TypeShiftBaseDto" ListItems="_typeShifts" @bind-SelectItem="_selectTypeShift"></MRadioGroup>
            }
        </div>
    </div>
</div>
<div>

    @if (_days != null && _days.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    @if (_daysName != null)
                    {
                        @foreach (var dayName in _daysName)
                        {
                            <th>@dayName</th>
                        }
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var week in getWeeks(_days))
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            if (day != null)
                            {
                                <td>
                                    <MButton Text="@day.StartDate.ToString("dd")" Style="@getColor(day)" OnClick="()=>setDayTypeShift(day)" />
                                </td>
                            }
                            else
                            {
                                <td></td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<MButton Text="Save" OnClick="onSave_Click" Style="width: 100%;"></MButton>
@code {
    private List<MonthAndYearItemViewModel> _monthAndYears = new();
    private MonthAndYearItemViewModel _selectMonthAndYear;
    public MonthAndYearItemViewModel SelectMonthAndYear
    {
        get => _selectMonthAndYear;
        set
        {
            if (value != null && _selectMonthAndYear != value)
            {
                _selectMonthAndYear = value;
                generateDays(_selectMonthAndYear);
            }
        }
    }
    private List<ShiftViewModel> _days = new();
    private string[] _daysName = new[] { "Po", "Út", "St", "Čt", "Pá", "So", "Ne" };
    private List<TypeShiftBaseDto> _typeShifts = new();
    private TypeShiftBaseDto? _selectTypeShift { get; set; }


    protected async override Task OnInitializedAsync()
    {
        createMontData();

        _typeShifts = await _httpClient.GetFromJsonAsync<List<TypeShiftBaseDto>>("/api/v1/shifts/types");
        _selectTypeShift = _typeShifts.FirstOrDefault();
        SelectMonthAndYear = _monthAndYears.FirstOrDefault();

        this.StateHasChanged();
    }

    private void createMontData()
    {
        var startDate = new DateTime(2025, 1, 1);
        var endDate = DateTime.Today;

        while (startDate <= endDate)
        {
            _monthAndYears.Add(new MonthAndYearItemViewModel(startDate));
            startDate = startDate.AddMonths(1);
        }
    }
    // private void onChangItemDateChanged(ChangeEventArgs e)
    // {
    //     var item = e.Value as MonthAndYearItem;
    //     if (item != null && !EqualityComparer<MonthAndYearItem>.Default.Equals(_selectMonthAndYear, item))
    //     {
    //         _selectMonthAndYear = item;
    //         generateDays(item);
    //     }
    // }

    private async void generateDays(MonthAndYearItemViewModel item)
    {
        // "api/v1/shifts"
        var planShiftsInDB = await _httpClient.GetFromJsonAsync<List<ShiftBaseDto>>("/api/v1/shifts");
        // await _shiftProvider.GetShiftsAsync(firstDate, lastDate);

        _days.Clear();
        var daysInMonth = DateTime.DaysInMonth(item.Year, item.Month);
        for (int i = 0; i < daysInMonth; i++)
        {
            var startDate = new DateTime(item.Year, item.Month, i + 1);
            var shiftInDb = planShiftsInDB.FirstOrDefault(x => x.StartDate == startDate);
            var existShift = (shiftInDb != null);

            Guid guidId = existShift ? shiftInDb.GuidId : Guid.Empty;
            int typeShiftId = existShift ? shiftInDb.TypeShiftId : 0;
            string? description = existShift ? shiftInDb?.Description : null;
            var typeShift = _typeShifts.FirstOrDefault(x => x.Id == typeShiftId);
            _days.Add(new ShiftViewModel(guidId, startDate, typeShiftId, typeShift, description));
        }

        this.StateHasChanged();
    }

    private void setDayTypeShift(ShiftViewModel day)
    {
        if (day.TypeShift == null)
            day.TypeShift = _selectTypeShift;
        else
            day.TypeShift = null;

        this.StateHasChanged();
    }

    private List<List<ShiftViewModel?>> getWeeks(List<ShiftViewModel> days)
    {
        var weeks = new List<List<ShiftViewModel?>>();
        if (days.Count == 0)
            return weeks;

        var firstDate = days.First().StartDate;
        int dayOfWeek = ((int)firstDate.DayOfWeek + 6) % 7; // 0 = Po, ..., 6 = Ne

        var currentWeek = new List<ShiftViewModel?>();
        // Add empty cells for days before the first day
        for (int i = 0; i < dayOfWeek; i++)
        {
            currentWeek.Add(null);
        }

        foreach (var day in days)
        {
            currentWeek.Add(day);
            if (currentWeek.Count == 7)
            {
                weeks.Add(currentWeek);
                currentWeek = new List<ShiftViewModel?>();
            }
        }

        // Add remaining days
        if (currentWeek.Count > 0)
        {
            while (currentWeek.Count < 7)
            {
                currentWeek.Add(null);
            }
            weeks.Add(currentWeek);
        }

        return weeks;
    }

    private string getColor(ShiftViewModel day)
    {
        var color = day?.TypeShift?.Color;
        return color != null ? $"background-color:{color}" : "";
    }

    private async void onSave_Click()
    {
        var shiftsDto = new List<ShiftBaseDto>();

        foreach (var item in _days.Where(x => x.TypeShift != null).ToList())
        {
            var shift = new ShiftBaseDto(item.GuidId, item.StartDate, item.TypeShift.Id);
            shiftsDto.Add(shift);
        }

        var result = await _httpClient.PutAsJsonAsync<List<ShiftBaseDto>>("/api/v1/shifts", shiftsDto);


    }
}
