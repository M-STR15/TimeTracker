@page "/reports/record-list"
@using AutoMapper
@using TimeTracker.BE.Web.BusinessLogic.Models.DTOs
@using TimeTracker.Web.Blazor.Server.Components.Elements
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Modals
@using TimeTracker.Web.Blazor.Server.Models

@inherits BasePage
@inject IMapper _mapper;

<h3>Report-Record list</h3>

@if (_monthAndYears != null)
{
    <div>
        <MCombobox Items="_monthAndYears" @bind-SelectedItem="SelectMonthAndYear" ItemText="item => item?.ToString()" />
        <MButton Text="Add" OnClick="onOpenAddActvityModal"></MButton>
        <MButton Text="Delete" OnClick="onOpenQueryDeleteActvityModal" IsDisabled="@(_selectedRecordActivity==null)"></MButton>
    </div>
    <MTable TRow="RecordListViewModel" Rows="_recordActivity" Columns="_recordActivityColumns" OnRowSelected="onRecordActivityRowSelected" @bind-Selected="_selectedRecordActivity"></MTable>

    <AddActivityModal Title="Change activity"
                      @bind-Visible="_isOpenAddActivityModal"
                      OnModalClosed="onAfterCloseModalAddActivity_Changed" />

    <QueryYesNoModal Title="Query"
                     QueryText="Chcete smazat záznam?"
                     ResultQueryChanged="onAfterCloseDeleteQueryResult"
                     @bind-Visible="_isOpenDeleteQueryModal" />
}


@code {
    private bool _isOpenDeleteQueryModal = false;
    private List<TableColumnDefinition<RecordListViewModel>>? _recordActivityColumns;
    private List<RecordListViewModel>? _recordActivity;
    private RecordListViewModel? _selectedRecordActivity;

    private bool _isOpenAddActivityModal = false;
    private void onOpenAddActvityModal() => _isOpenAddActivityModal = true;
    private void onOpenQueryDeleteActvityModal() => _isOpenDeleteQueryModal = true;

    private List<MonthAndYearItemViewModel>? _monthAndYears = new();
    private MonthAndYearItemViewModel? _selectMonthAndYear;
    public MonthAndYearItemViewModel? SelectMonthAndYear
    {
        get => _selectMonthAndYear;
        set
        {
            if (value != null && _selectMonthAndYear != value)
            {
                _selectMonthAndYear = value;
                loadData();
            }
        }
    }

    private void onAfterCloseModalAddActivity_Changed()
    {
        loadData();
    }

    private async Task onAfterCloseDeleteQueryResult(bool confirmed)
    {
        try
        {
            if (confirmed && _selectedRecordActivity != null && _httpClient != null)
            {
                var urlApi = $"/api/v1/record-activities/{_selectedRecordActivity.GuidId}";
                var result = await _httpClient.DeleteAsync(urlApi);
                if (result.IsSuccessStatusCode)
                {
                    _selectedRecordActivity = null;
                    loadData();
                }
            }
        }
        catch (Exception)
        {

        }
    }


    protected override void OnInitialized()
    {
        try
        {
            base.OnInitialized();
            _monthAndYears = GeneratorDatesHelper.GetMontData().ToList();
            SelectMonthAndYear = _monthAndYears.FirstOrDefault();
            _recordActivityColumns = createColumnDefinitions();
            loadData();
        }
        catch (Exception ex)
        {

        }
    }

    private async void loadData()
    {
        try
        {
            var dateStart = SelectMonthAndYear.Date;
            var dateEnd = SelectMonthAndYear.Date.AddMonths(1);

            var formattedDateStart = dateStart.ToString("yyyy-MM-dd");
            var formattedDateEnd = dateEnd.ToString("yyyy-MM-dd");


            var urlApi = $"/api/v1/reports/record-activiries/{formattedDateStart}/{formattedDateEnd}";
            var recordActivityDto = await _httpClient.GetFromJsonAsync<List<RecordActivityDetailDto>>(urlApi);
            _recordActivity = _mapper.Map<List<RecordListViewModel>>(recordActivityDto);

            this.StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }


    private List<TableColumnDefinition<RecordListViewModel>> createColumnDefinitions()
    {
        return new List<TableColumnDefinition<RecordListViewModel>>
                {
                    new TableColumnDefinition<RecordListViewModel>
                    {
                        Header = "Start",
                        Key = nameof(RecordListViewModel.StartDateTime),
                    },
                    new TableColumnDefinition<RecordListViewModel>
                    {
                        Header = "End",
                        Key = nameof(RecordListViewModel.EndDateTime),
                    },
                    new TableColumnDefinition<RecordListViewModel>
                    {
                        Header = "Activity",
                        Key = nameof(RecordListViewModel.ActivityName),
                    },
                    new TableColumnDefinition<RecordListViewModel>
                    {
                        Header = "Project",
                        Key = nameof(RecordListViewModel.ProjectName),
                    },
                          new TableColumnDefinition<RecordListViewModel>
                    {
                        Header = "Submodule",
                        Key = nameof(RecordListViewModel.SubModuleName),
                    },
                    new TableColumnDefinition<RecordListViewModel>
                    {
                        Header = "Type shift",
                        Key = nameof(RecordListViewModel.TypeShiftName),
                    },
                      new TableColumnDefinition<RecordListViewModel>
                    {
                        Header = "Shift",
                        Key = nameof(RecordListViewModel.TypeShiftName),
                    },
                     new TableColumnDefinition<RecordListViewModel>
                    {
                        Header = "Description",
                        Key = nameof(RecordListViewModel.Description),
                    },
                };
    }

    private void onRecordActivityRowSelected(RecordListViewModel selectedRow)
    {
        // if (!selectedRow.Equals(_selectedProject))
        // {
        // 	_selectedProject = selectedRow;

        // 	base.StateHasChanged();
        // }
    }
}
