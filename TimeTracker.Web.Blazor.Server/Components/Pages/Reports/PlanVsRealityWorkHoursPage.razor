@using TimeTracker.BE.DB.Models
@using TimeTracker.FE.Web.Components.Models
@using TimeTracker.Web.Blazor.Server.Helpers
@using TimeTracker.Web.Blazor.Server.Models
@page "/reports/plan-vs-reality-work-hours"
@inherits BasePage

<h3>Plan vs reality work hours </h3>
<div>
    <label>Month:</label>
    <MCombobox Items="_monthAndYears" @bind-SelectedItem="SelectMonthAndYear" ItemText="item => item.ToString()" />
</div>

@if (_dataset != null && _labels != null)
{
    <MChart Labels="_labels" Dataset="_dataset" />
}
else
{
    <MLoader />
}

@code {
    private object? _labels;
    private object? _dataset;
    private List<MonthAndYearItemViewModel> _monthAndYears = new();
    private MonthAndYearItemViewModel _selectMonthAndYear;
    public MonthAndYearItemViewModel SelectMonthAndYear
    {
        get => _selectMonthAndYear;
        set
        {
            if (value != null && _selectMonthAndYear != value)
            {
                _selectMonthAndYear = value;
                onSelectMonthAndYearHandlerChange();
            }
        }
    }

    private EventHandler selectMonthAndYearHandler;

    private void onSelectMonthAndYearHandlerChange() => selectMonthAndYearHandler.Invoke(null, null);

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        _monthAndYears = GeneratorDatesHelper.GetMontData().ToList();
        selectMonthAndYearHandler += async (s, e) =>
        {
            await inicializationChartAsync();
        };

        SelectMonthAndYear = _monthAndYears.FirstOrDefault();
    }

    private async Task inicializationChartAsync()
    {
        if (SelectMonthAndYear == null)
            return;

        var month = SelectMonthAndYear.Month;
        var year = SelectMonthAndYear.Year;
        var urlApi = $"/api/v1/reports/workplace-hours/{year}/{month}";
        var workplaceHours = await _httpClient.GetFromJsonAsync<WorkplaceHours>(urlApi);

        var labels = workplaceHours.OfficeWorkHourslist.Select(x => x.Date.ToString("dd.MM")).ToArray();

        var officeWHData = workplaceHours.OfficeWorkHourslist.Select(x => x.DateHours).ToArray();
        var homeOfficeWHData = workplaceHours.HomeOfficeWorkHourslist.Select(x => x.DateHours).ToArray();

        var officeCumWHData = workplaceHours.OfficeWorkHourslist.Select(x => x.CumHours).ToArray();
        var homeOfficeCumWHData = workplaceHours.HomeOfficeWorkHourslist.Select(x => x.CumHours).ToArray();

        var officePlanWHData = workplaceHours.PlanWorkHoursList.Select(x => x.CumHours).ToArray();
        var homeOfficePlanWHData = workplaceHours.HomeOfficeWorkHourslist.Select(x => x.CumHours).ToArray();

        // var backgroundColor = workplaceHours.OfficeWorkHourslist.Select(x => "blue").ToArray();
        // var backgroundColor2 = workplaceHours.OfficeWorkHourslist.Select(x => "red").ToArray();

        _dataset = new[]
                        {
                         new { Data = officeWHData, BackgroundColor = "blue", Type= "bar",Label= "Office work hours",BorderColor="blue"},
                         new { Data = homeOfficeWHData, BackgroundColor = "red", Type= "bar",Label= "Homeoffice work hours",BorderColor="red"},

                         new { Data = officeCumWHData, BackgroundColor = "orange", Type= "line",Label= "Cum.-Office work hours" ,BorderColor="orange"},
                         new { Data = homeOfficeCumWHData, BackgroundColor = "gray", Type= "line",Label= "Cum.-Homeoffice work hours",BorderColor="gray"},

                         new { Data = officePlanWHData, BackgroundColor = "purple", Type= "line",Label= "Cum.-Office work hours-Plan",BorderColor="purple"},
                         new { Data = homeOfficePlanWHData, BackgroundColor = "pink", Type= "line",Label= "Cum.-Homeoffice work hours-Plan",BorderColor="pink"}
                         };
        _labels = labels;

        StateHasChanged();
    }
}