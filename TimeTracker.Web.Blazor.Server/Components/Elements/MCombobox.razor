@typeparam TItem
@inject IJSRuntime JS

<div class="custom-combobox">
    <div class="input-container">
        <input @ref="inputRef"
               type="text"
               class="form-control"
               @bind="SearchText"
               @onfocus="OnFocus"
               @oninput="OnInput"
               @onblur="@(() => JS.InvokeVoidAsync("delayBlur", DotNetObjectReference.Create(this)))"
               placeholder="Vyberte možnost..."
               readonly />
        <button type="button" class="dropdown-button" @onclick="ToggleDropdown">▼</button>
    </div>
    @if (IsDropdownVisible && Items != null && Items.Any())
    {
        <ul class="dropdown-list" @onmousedown:preventDefault>
            @foreach (var item in Items)
            {
                <li @onmousedown="(() => selectItem(item))" class="dropdown-item @getSelectedClass(item)">
                    @ItemText(item)
                </li>
            }
        </ul>
    }
</div>

@code {
    private ElementReference inputRef;
    private bool IsDropdownVisible { get; set; } = false;
    private string SearchText { get; set; } = string.Empty;
    private TItem _selectedItem;
    private async Task RemoveFocus() => await JS.InvokeVoidAsync("removeFocus", inputRef);

    [Parameter]
    public TItem SelectedItem
    {
        get => _selectedItem;
        set
        {
            if (!EqualityComparer<TItem>.Default.Equals(_selectedItem, value))
            {
                _selectedItem = value;
                SelectedItemChanged.InvokeAsync(_selectedItem); // Vyvolání události ValueChanged
            }

            if (_selectedItem != null)
            {
                SearchText = _selectedItem.ToString();
                selectItem(_selectedItem);
            }
        }
    }

    [Parameter, EditorRequired]
    public List<TItem> Items { get; set; } = new List<TItem>();
    [Parameter]
    public EventCallback<TItem> SelectedItemChanged { get; set; }

    [Parameter]
    public Func<TItem, string> ItemText { get; set; }
    [Parameter]
    public EventCallback<int> ItemTextChanged { get; set; }
    [Parameter]
    public Func<TItem, int> ItemId { get; set; }
    [Parameter]
    public EventCallback<int> ItemIdChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnSearchTextChanged { get; set; }
    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }
    [JSInvokable]
    public void HandleBlur()
    {
        IsDropdownVisible = false;
        StateHasChanged();
    }

    private async void OnInput(ChangeEventArgs e)
    {
        if (SearchText != e?.Value?.ToString())
        {
            SearchText = e.Value.ToString();
            await OnSearchTextChanged.InvokeAsync(SearchText);
            await OnChange.InvokeAsync(e);
        }
    }

    private void OnFocus()
    {
        IsDropdownVisible = true;
    }

    private void OnBlur()
    {
        // Po ztrátě zaměření skrytí dropdownu s malým zpožděním pro umožnění výběru
        Task.Delay(150);
        IsDropdownVisible = false;
        StateHasChanged();
    }
    private void ToggleDropdown()
    {
        IsDropdownVisible = !IsDropdownVisible;
    }

    private async void selectItem(TItem item)
    {
        if (!EqualityComparer<TItem>.Default.Equals(SelectedItem, item))
        {
            SelectedItem = item;
            // OnChange.InvokeAsync(item);
            IsDropdownVisible = false;
            SearchText = ItemText(item); // Nastavit text vybraného prvku

            var eventArgs = new ChangeEventArgs
                {
                    Value = item
                };
            await OnChange.InvokeAsync(eventArgs);
            await RemoveFocus();
        }
    }

    private string getSelectedClass(TItem item)
    {
        return Equals(item, SelectedItem) ? "selected" : string.Empty;
    }
}
