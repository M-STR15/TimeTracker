@typeparam TItem
@inject IJSRuntime JS

<style>
    .input-container {
        display: flex;
        align-items: center;
        border: 1px solid #ccc;
        border-radius: 5px;
        overflow: hidden;
        width: 100%;
    }

    .dropdown-button {
        background: #f0f0f0;
        border: none;
        padding: 8px 12px;
        cursor: pointer;
    }

        .dropdown-button:hover {
            background: #ddd;
        }

    .dropdown-list {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    .dropdown-item {
        padding: 8px 12px;
        cursor: pointer;
    }

        .dropdown-item:hover {
            background-color: #f0f0f0;
        }

        .dropdown-item.selected {
            background-color: #007bff;
            color: white;
        }
</style>

<div class="custom-combobox">
    <div class="input-container">
        <input type="text" class="form-control"
               @bind="SearchText"
               @onfocus="OnFocus"
               @onblur="@(() => JS.InvokeVoidAsync("delayBlur", DotNetObjectReference.Create(this)))"
               @oninput="OnInput"
               placeholder="Vyberte možnost..."
               readonly />
        <button type="button" class="dropdown-button" @onclick="ToggleDropdown">▼</button>
    </div>
    @if (IsDropdownVisible && Items != null && Items.Any())
    {
        <ul class="dropdown-list" @onmousedown:preventDefault>
            @foreach (var item in Items)
            {
                <li @onmousedown="(() => SelectItem(item))" class="dropdown-item @GetSelectedClass(item)">
                    @ItemText(item)
                </li>
            }
        </ul>
    }
</div>

@code {
    private bool IsDropdownVisible { get; set; } = false;
    private string SearchText { get; set; } = string.Empty;
    private TItem _selectedItem;
    [Parameter]
    public TItem SelectedItem
    {
        get => _selectedItem;
        set
        {
            if (!EqualityComparer<TItem>.Default.Equals(_selectedItem, value))
                SelectedItemChanged.InvokeAsync(_selectedItem); // Vyvolání události ValueChanged
        }
    }

    [Parameter]
    public List<TItem> Items { get; set; } = new List<TItem>();
    [Parameter]
    public Func<TItem, string> ItemText { get; set; }
    [Parameter]
    public Func<TItem, int> ItemId { get; set; }
    [Parameter]
    public EventCallback<TItem> SelectedItemChanged { get; set; }
    [Parameter]
    public EventCallback<int> SelectedItemId { get; set; }
    [Parameter]
    public EventCallback<string> OnSearchTextChanged { get; set; }
    [Parameter]
    public EventCallback<ChangeEventArgs> OnChange { get; set; }
    [JSInvokable]
    public void HandleBlur()
    {
        IsDropdownVisible = false;
        StateHasChanged();
    }

    private async void OnInput(ChangeEventArgs e)
    {
        SearchText = e.Value.ToString();
        await OnSearchTextChanged.InvokeAsync(SearchText);
        await OnChange.InvokeAsync(e);
    }

    private void OnFocus()
    {
        IsDropdownVisible = true;
    }

    private void OnBlur()
    {
        // Po ztrátě zaměření skrytí dropdownu s malým zpožděním pro umožnění výběru
        Task.Delay(150);
        IsDropdownVisible = false;
        StateHasChanged();
    }
    private void ToggleDropdown()
    {
        IsDropdownVisible = !IsDropdownVisible;
    }

    private async void SelectItem(TItem item)
    {
        SelectedItem = item;
        await SelectedItemChanged.InvokeAsync(item);
        // OnChange.InvokeAsync(item);
        IsDropdownVisible = false;
        SearchText = ItemText(item); // Nastavit text vybraného prvku

        var eventArgs = new ChangeEventArgs
            {
                Value = item 
            };
        await OnChange.InvokeAsync(eventArgs);
    }

    private string GetSelectedClass(TItem item)
    {
        return Equals(item, SelectedItem) ? "selected" : string.Empty;
    }
}
