@using TimeTracker.Web.Blazor.Server.Models.Interfaces

@typeparam TItem where TItem : ITItemWithColor

<style>
    .container {
        display: flex;
        justify-content: flex-start;
    }

    .column {
        width: 120px; /* Nastaví šířku sloupců na 48%, aby zůstalo trochu místa mezi nimi */
    }
</style>

<InputRadioGroup @bind-Value="_selectId">
    <div class="container">
        @foreach (var item in ListItems)
        {
            <div style="background-color:@getColor(item)" class="column">
                <InputRadio Value="@item.Id" @onclick="()=>onRadioButtonClicked(item)" />
                @item.Name
            </div>
        }
    </div>
</InputRadioGroup>

@code {
    [Parameter, EditorRequired]
    public IEnumerable<TItem> ListItems { get; set; }

    private TItem _selectItem;
    [Parameter]
    public TItem SelectItem
    {
        get => _selectItem;
        set
        {
            if (!EqualityComparer<TItem>.Default.Equals(_selectItem, value))
            {
                _selectItem = value;
                SelectItemChanged.InvokeAsync(_selectItem);
            }

            if (SelectItem != null && _selectId != SelectItem.Id)
            {
                _selectId = SelectItem.Id;
            }
        }
    }
    [Parameter]
    public EventCallback<TItem> SelectItemChanged { get; set; }

    [Parameter]
    public string StyleItem { get; set; }

    private int _selectId;

    // protected override void OnParametersSet()
    // {
    //     base.OnParametersSet();

    //     if (ListItems != null && ListItems.Any())
    //         SelectItem = ListItems.FirstOrDefault(x => x.Id == _selectId);
    // }

    private void onRadioButtonClicked(TItem item) => SelectItem = item;

    private string getColor(TItem item) => item.Color;
}
