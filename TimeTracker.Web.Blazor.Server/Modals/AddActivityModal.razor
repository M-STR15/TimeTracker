@using Microsoft.AspNetCore.Components.Forms
@using System.Net
@using TimeTracker.BE.Web.BusinessLogic.Models.DTOs
@using TimeTracker.Basic.Enums
@using TimeTracker.FE.Web.Components
@using TimeTracker.FE.Web.Components.Models
@using TimeTracker.FE.Web.Components.Services
@using TimeTracker.Web.Blazor.Server.Modals.Models
@implements IDisposable

@inherits BaseSaveViewModal
@inject IHttpClientFactory HttpClientFactory
@inject ToastNotificationService _toastNotificationService

<BaseModal @bind-Visible=Visible Title=@Title>
    <BodyContent>
        @if (_recordActivityInsertDto != null)
        {
            <EditForm EditContext="@editContext">
                <DataAnnotationsValidator />
                <div class="main">
                    <div class="row">
                        <div class="col-6">
                            <h6>Type shift</h6>
                            <MCombobox Items="_typeShifts" ItemText="item => item.Name" OnChange="OnTypeShiftChanged" />
                            <ValidationMessage For="@(() => _recordActivityInsertDto.TypeShiftId)" />
                        </div>
                        <div class="col-6">
                            <h6>Shifts</h6>
                            <MCombobox Items="_shifts" ItemText="item => item.StartDate.ToLongDateString()" OnChange="OnShiftChanged" />
                            <ValidationMessage For="@(() => _recordActivityInsertDto.ShiftGuidId)" />
                        </div>
                    </div>
                    <div class="row">
                        <h6>Project</h6>
                        <MCombobox Items="_projects" ItemText="item => item.Name" OnChange="OnProjectChanged" />
                        <ValidationMessage For="@(() => _recordActivityInsertDto.ProjectId)" />
                    </div>
                    @if (_subModules != null && _subModules.Count > 0)
                    {
                        <div class="row">
                            <h6>Sub module</h6>
                            <MCombobox Items="_subModules" ItemText="item => item.Name" OnChange="OnSubModuleChanged"
                                       IsEditable=_isEditableSubModule />
                            <ValidationMessage For="@(() => _recordActivityInsertDto.SubModuleId)" />
                        </div>
                    }
                    <div class="row">
                        <h6>Description</h6>
                        <MTextArea @bind-Value="@_recordActivityInsertDto.Description" />
                        <ValidationMessage For="@(() => _recordActivityInsertDto.Description)" />
                    </div>
                    <div class="row">
                        <MButton IsDisabled="@(!isFormValid)" OnClick="save_Click">Save</MButton>
                    </div>
                </div>
            </EditForm>
        }

    </BodyContent>
</BaseModal>


@code {
    private List<TypeShiftBaseDto>? _typeShifts;
    private List<ShiftBaseDto>? _shifts;
    private List<ProjectBaseDto>? _projects;
    private List<SubModuleBaseDto>? _subModules;

    private RecordActivityInsertDto? _recordActivityInsertDto;

    private bool _isEditableSubModule => _recordActivityInsertDto?.ProjectId != null;

    private bool _isFormValid => _recordActivityInsertDto?.TypeShiftId != null;

    private void OnTypeShiftChanged(ChangeEventArgs e)
    {
        if (e.Value is TypeShiftBaseDto item && _recordActivityInsertDto != null)
        {
            _recordActivityInsertDto.TypeShiftId = item?.Id;

            var fieldIdentifier = FieldIdentifier.Create(() => _recordActivityInsertDto.TypeShiftId);
            editContext?.NotifyFieldChanged(fieldIdentifier);
        }
    }

    private void OnShiftChanged(ChangeEventArgs e)
    {
        if (e.Value is ShiftBaseDto item && _recordActivityInsertDto != null)
        {
            _recordActivityInsertDto.ShiftGuidId = item?.GuidId;

            var fieldIdentifier = FieldIdentifier.Create(() => _recordActivityInsertDto.ShiftGuidId);
            editContext?.NotifyFieldChanged(fieldIdentifier);
        }
    }

    private async void OnProjectChanged(ChangeEventArgs e)
    {
        if (e.Value is ProjectBaseDto item && _recordActivityInsertDto != null)
        {
            _recordActivityInsertDto.ProjectId = item?.Id;

            try
            {

                var url = $"/api/v1/projects/submodules/{_recordActivityInsertDto.ProjectId}";
                var request = new HttpRequestMessage(HttpMethod.Get, url);

                var response = await _httpClient.SendAsync(request);
                _subModules = null;
                if (response.IsSuccessStatusCode)
                {
                    var subModules = await response.Content.ReadFromJsonAsync<List<SubModuleBaseDto>>();
                    if (subModules != null)
                        _subModules = subModules;
                }
                else if (response.StatusCode == HttpStatusCode.NotFound)
                {
                    // Např. projekt nemá žádné submoduly — nemusíš logovat chybu
                    Console.WriteLine("Žádné submoduly nenalezeny (404).");
                }
                else
                {
                    // Jiná chyba (např. 500), zde si můžeš rozhodnout, co dál
                    Console.WriteLine($"Chyba volání API: {(int)response.StatusCode} {response.ReasonPhrase}");
                }


                var fieldIdentifier = FieldIdentifier.Create(() => _recordActivityInsertDto.ProjectId);
                editContext?.NotifyFieldChanged(fieldIdentifier);
            }
            catch (HttpRequestException)
            {

            }
            catch (Exception)
            {

                throw;
            }
        }
    }

    private void OnSubModuleChanged(ChangeEventArgs e)
    {
        if (e.Value is SubModuleBaseDto item && _recordActivityInsertDto != null)
        {
            _recordActivityInsertDto.SubModuleId = item?.Id;

            var fieldIdentifier = FieldIdentifier.Create(() => _recordActivityInsertDto.SubModuleId);
            editContext?.NotifyFieldChanged(fieldIdentifier);
        }
    }

    private Task OnValueChanged(string newValue)
    {
        if (_recordActivityInsertDto != null)
            _recordActivityInsertDto.Description = newValue;

        return Task.CompletedTask;
    }


    protected async override void performActionOnOpen()
    {
        if (_httpClient == null)
            return;

        var typeShiftsReq = await _httpClient.GetFromJsonAsync<List<TypeShiftBaseDto>>("/api/v1/shifts/types");
        if (typeShiftsReq != null)
            _typeShifts = typeShiftsReq;

        var shiftsReq = await _httpClient.GetFromJsonAsync<List<ShiftBaseDto>>("/api/v1/shifts");
        if (shiftsReq != null)
            _shifts = shiftsReq;

        var projectsReq = await _httpClient.GetFromJsonAsync<List<ProjectBaseDto>>("/api/v1/projects");
        if (projectsReq != null)
            _projects = projectsReq;

        _recordActivityInsertDto = new();
        _recordActivityInsertDto.ActivityId = (int)eActivity.Start;
        editContext = new EditContext(_recordActivityInsertDto);
        editContext.OnFieldChanged += onFieldChanged;

        StateHasChanged();
    }

    protected override void performActionOnClose()
    {
        if (editContext != null)
            editContext.OnFieldChanged -= onFieldChanged;
    }

    public void Dispose()
    {
        performActionOnClose();
    }

    protected async override void save_Click()
    {
        if (_httpClient != null && _recordActivityInsertDto != null)
        {
            _recordActivityInsertDto.StartDateTime = DateTime.Now;
            var result = await _httpClient.PostAsJsonAsync<RecordActivityInsertDto>("api/v1/record-activities", _recordActivityInsertDto);

            if (result.StatusCode == HttpStatusCode.OK)
                _toastNotificationService.AddNotification(eNotificationType.Success, "Success", "Data byala upraveny.");
            else
                _toastNotificationService.AddNotification(eNotificationType.Warning, "Bad Request", "Chybný požadavek.");
            
            await closeModalAsync();
        }
    }
}
