@using Microsoft.AspNetCore.Components.Forms
@using TimeTracker.BE.Web.BusinessLogic.Models.DTOs
@using TimeTracker.FE.Components
@using TimeTracker.Web.Blazor.Server.Modals.Models

@inherits BaseSaveViewModal
@inject IHttpClientFactory HttpClientFactory

<BaseModal @bind-Visible=Visible Title=@Title>
    <BodyContent>
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator />

            <h6>Name</h6>
            <MTextBox @bind-Value="@SubModule.Name"></MTextBox>
            <ValidationMessage For="@(() => SubModule.Name)" />

            <h6>Description</h6>
            <MTextArea @bind-Value="@SubModule.Description" />
            <ValidationMessage For="@(() => SubModule.Description)" />

            <MButton Text="Save" IsDisabled="@(!isFormValid)" OnClick="save_Click" />
        </EditForm>
    </BodyContent>
</BaseModal>

@code {
    [Parameter, EditorRequired]
    public SubModuleBaseDto SubModule { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        try
        {
            _httpClient = HttpClientFactory.CreateClient("TimeTrackerAPI");
        }
        catch (Exception ex)
        {

        }
    }

    protected async override void save_Click()
    {
        if (_httpClient != null)
        {
            var urlApi = "/api/v1/projects/submodule";
            if (SubModule.Id == 0)
            {
                var subModuleMod = _mapper.Map<SubModuleInsertDto>(SubModule);
                await _httpClient.PostAsJsonAsync<SubModuleInsertDto>(urlApi, subModuleMod);
            }
            else
            {
                await _httpClient.PutAsJsonAsync<SubModuleBaseDto>(urlApi, SubModule);
            }

            await closeModalAsync();
        }
    }

    protected override void performActionOnOpen()
    {
        editContext = new EditContext(SubModule);
        editContext.OnFieldChanged += onFieldChanged;

    }

    protected override void performActionOnClose()
    {
        if (editContext != null)
            editContext.OnFieldChanged -= onFieldChanged;
    }

}
