@using AutoMapper
@using Microsoft.AspNetCore.Components.Forms
@using TimeTracker.BE.Web.BusinessLogic.Models.DTOs
@using TimeTracker.FE.Web.Components
@using TimeTracker.Web.Blazor.Server.Modals.Models

@inherits BaseSaveViewModal
@inject IHttpClientFactory HttpClientFactory

<BaseModal @bind-Visible=Visible Title=@Title>
    <BodyContent>
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator />
            <div class="main">
                <div class="row">
                    <h6>Name</h6>
                    <MTextBox @bind-Value="@Project.Name" />
                    <ValidationMessage For="@(() => Project.Name)" />
                </div>
                <div class="row">
                    <MButton Text="Save" IsDisabled="@(!isFormValid)" OnClick="save_Click" />
                </div>
            </div>
        </EditForm>
    </BodyContent>
</BaseModal>

@code {

    [Parameter, EditorRequired]
    public ProjectBaseDto? Project { get; set; }

    [Parameter]
    public EventCallback<ProjectBaseDto> ProjectChanged { get; set; }


    protected override void performActionOnOpen()
    {
        if (Project != null)
        {
            editContext = new EditContext(Project);
            editContext.OnFieldChanged += onFieldChanged;
        }
    }

    protected override void performActionOnClose()
    {
        if (editContext != null)
            editContext.OnFieldChanged -= onFieldChanged;
    }

    protected async override void save_Click()
    {
        if (_httpClient != null && Project != null)
        {
            var urlApi = "/api/v1/project";
            if (Project.Id != 0)
            {
                var result = await _httpClient.PutAsJsonAsync<ProjectBaseDto>(urlApi, Project);
            }
            else
            {
                var projectConvert = _mapper.Map<ProjectInsertDto>(Project);
                var result = await _httpClient.PostAsJsonAsync<ProjectInsertDto>(urlApi, projectConvert);
            }

            if (ProjectChanged.HasDelegate)
                ProjectChanged.InvokeAsync(Project).Wait();

            await closeModalAsync();
        }
    }
}
