@using AutoMapper
@using Microsoft.AspNetCore.Components.Forms
@using TimeTracker.Web.Blazor.Server.Components.Elements
@using TimeTracker.Web.Blazor.Server.Modals.Models
@using TimerTracker.BE.Web.BusinessLogic.Models.DTOs

@inherits BaseSaveViewModal
@inject IHttpClientFactory HttpClientFactory

<BaseModal @bind-Visible=Visible Title=@Title>
    <BodyContent>
        <EditForm EditContext="@editContext" OnValidSubmit="@save_Click">
            <DataAnnotationsValidator />
            @*       <ValidationSummary />
 *@
            <h6>Name</h6>

            <MTextBox @bind-Value="@Project.Name"></MTextBox>
            <ValidationMessage For="@(() => Project.Name)" />

            <MButton Text="Save" OnClick="save_Click" IsDisabled="@(!isFormValid)" />
        </EditForm>
    </BodyContent>
</BaseModal>

@code {

    [Parameter, EditorRequired]
    public ProjectBaseDto Project { get; set; }

    [Parameter]
    public EventCallback OnModalClosed { get; set; }  // Událost, kterou spustíme při zavření modálu
    [Inject]
    private IMapper _mapper { get; set; }

    private bool isFormValid = false;
    private EditContext editContext;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        try
        {
            _httpClient = HttpClientFactory.CreateClient("TimeTrackerAPI");
        }
        catch (Exception ex)
        {

        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Visible)
            await performActionOnOpenAsync();
        else
            await performActionOnCloseAsync();
    }

    private async Task performActionOnOpenAsync()
    {
        isFormValid = false;
        editContext = new EditContext(Project);
        editContext.OnFieldChanged += onFieldChanged;

    }

    private async Task performActionOnCloseAsync()
    {
        if (editContext != null)
            editContext.OnFieldChanged -= onFieldChanged;
    }

    private void onFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        isFormValid = editContext.Validate();
        StateHasChanged(); // přepočítá stav komponenty
    }


    protected async override void save_Click()
    {
        if (_httpClient != null)
        {
            var urlApi = "/api/v1/project";
            if (Project.Id != 0)
            {
                var result = await _httpClient.PutAsJsonAsync<ProjectBaseDto>(urlApi, Project);
            }
            else
            {
                var projectConvert = _mapper.Map<ProjectInsertDto>(Project);
                var result = await _httpClient.PostAsJsonAsync<ProjectInsertDto>(urlApi, projectConvert);
            }
            await CloseModalAsync();
            Visible = false;
        }
    }

    public async Task CloseModalAsync() => await OnModalClosed.InvokeAsync(null); 
}
