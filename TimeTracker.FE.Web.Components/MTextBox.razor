
@typeparam T

<input @bind="@Value" @oninput="HandleInput" class="form-control"></input>

@code {
    [CascadingParameter] private EditContext? EditContext { get; set; }

    [Parameter] public T Value { get; set; } = default!;
    [Parameter] public EventCallback<T> ValueChanged { get; set; }

    [Parameter] public Expression<Func<T>>? ValueExpression { get; set; }

    private async Task HandleInput(ChangeEventArgs e)
    {
        if (e.Value is not null && typeof(T) == typeof(string))
        {
            Value = (T)(object)e.Value.ToString()!;
        }
        else
        {
            Value = (T)e.Value!;
        }

        await ValueChanged.InvokeAsync(Value);

        if (EditContext != null && ValueExpression != null)
        {
            var fieldIdentifier = FieldIdentifier.Create(ValueExpression);
            EditContext.NotifyFieldChanged(fieldIdentifier);
        }
    }
}