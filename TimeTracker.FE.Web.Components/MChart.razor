@using Microsoft.JSInterop
@using TimeTracker.FE.Web.Components.Interops
@using TimeTracker.FE.Web.Components.Models

<script src="js/mchart2.js"></script>

<canvas @ref="canvasRef"></canvas>

@code {
    private DotNetObjectReference<MChart>? dotNetRef;
    [Inject] private IJSRuntime JSRuntime { get; set; }

    private ElementReference canvasRef;
    [Inject] private ChartJsInterop _chartJsInterop { get; set; }

    [Parameter, EditorRequired]
    public object? Labels { get; set; }
    [Parameter, EditorRequired]
    public object? Dataset { get; set; }
    [Parameter, EditorRequired]
    public object? Options { get; set; }

    protected override void OnInitialized()
    {
        dotNetRef = DotNetObjectReference.Create(this);
        StateHasChanged();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await inicializationChartAsync();
        }
    }

    protected async override Task OnParametersSetAsync()
    {
        await inicializationChartAsync();
        await base.OnParametersSetAsync();
    }

    private async Task inicializationChartAsync()
    {
        if (Labels != null && Dataset != null)
        {
            var config = new
            {
                Options = Options,
                Data = new
                {
                    Datasets = Dataset,
                    Labels = Labels
                }
            };

            if (_chartJsInterop is not null && config != null)
            {
                await _chartJsInterop.SetupChartAsync(canvasRef, config, dotNetRef);
                StateHasChanged();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_chartJsInterop is not null)
            await _chartJsInterop.DisposeAsync();
    }

    [JSInvokable("OnChartReady")]
    public void OnChartReady()
    {
        StateHasChanged(); // Tímto přerendujeme komponentu
    }
}