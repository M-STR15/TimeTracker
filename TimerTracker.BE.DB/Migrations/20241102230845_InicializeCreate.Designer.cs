// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimerTracker.BE.DB.DataAccess;

#nullable disable

namespace TimerTracker.BE.DB.Migrations
{
    [DbContext(typeof(MainDatacontext))]
    [Migration("20241102230845_InicializeCreate")]
    partial class InicializeCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("TimerTracker.BE.DB.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Activities", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Start"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pause"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stop"
                        });
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Project", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Project 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Project 2"
                        });
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.RecordActivity", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Guid_ID");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.Property<Guid?>("ShiftGuidId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Shift_GuidID");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("Start_time");

                    b.Property<int?>("SubModuleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubModule_ID");

                    b.Property<int>("TypeShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.HasKey("GuidId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ShiftGuidId");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("TypeShiftId");

                    b.ToTable("Record_activities", "dbo");

                    b.HasData(
                        new
                        {
                            GuidId = new Guid("a03ccd74-125d-4282-9b9e-3b2f425d75c6"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("a302ef5d-8f28-4407-afe6-7fefcc194463"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("c007224f-0b77-455d-8392-8c823e1ed707"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("82cc4892-3682-48a3-9773-cbfa11d38310"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("936c2b4d-3382-45f0-9c79-487080e28a08"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("6c612a12-b523-4a7a-b59c-c59ea9f306c0"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("65ee1ccb-a136-484d-8aef-d3a7f983c21a"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("c0fb140b-e16b-47bf-a849-12b4c6a37487"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("7ef303ad-b6b5-442c-9742-d4903da5db2f"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("ad53fd53-79b0-41a2-b196-1bb3364c82f0"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("4af68c55-abf0-4b6e-a4ab-65b10281d36f"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("afc35f51-5e63-402d-ac7a-fcc86ffb2199"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("04bd8683-4063-4b1b-9396-9441aee0d0f6"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("c374fe89-5171-401e-88e1-93a151d4fcfd"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("ad9df005-80bb-4cb3-8bb8-fe0b54c7e096"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("e995c47c-4ce1-4759-91b3-bd86a3167337"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("2e8aed50-a704-4b13-bd2d-2c8eb526ec61"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("7b6c8911-843b-4b06-bc01-21ef80b6aa2f"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("433b4608-b315-473b-a6a6-ecd63c216361"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("9143c640-ff6a-4acb-a908-ca7d8d209a57"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        });
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.Shift", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Guid_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShiftGuidId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Start_date");

                    b.Property<int>("TypeShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.HasKey("GuidId");

                    b.HasIndex("ShiftGuidId");

                    b.HasIndex("StartDate")
                        .IsUnique();

                    b.HasIndex("TypeShiftId");

                    b.ToTable("Shifts", "dbo", t =>
                        {
                            t.HasComment("Tabulka slouží k naplánování směny.");
                        });
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.SubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubModule_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("SubModule", "dbo");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisibleInMainWindow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("TypeShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeShiftId");

                    b.ToTable("TypeShifts", "dbo", t =>
                        {
                            t.HasComment("Tabulka všech možných směn.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Color = "SkyBlue",
                            IsVisibleInMainWindow = true,
                            Name = "HomeOffice"
                        },
                        new
                        {
                            Id = 1,
                            Color = "Orange",
                            IsVisibleInMainWindow = true,
                            Name = "Office"
                        },
                        new
                        {
                            Id = 3,
                            Color = "MediumPurple",
                            IsVisibleInMainWindow = true,
                            Name = "Others"
                        },
                        new
                        {
                            Id = 4,
                            Color = "LawnGreen",
                            IsVisibleInMainWindow = false,
                            Name = "Holiday"
                        });
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.RecordActivity", b =>
                {
                    b.HasOne("TimerTracker.BE.DB.Models.Activity", "Activity")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimerTracker.BE.DB.Models.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TimerTracker.BE.DB.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftGuidId");

                    b.HasOne("TimerTracker.BE.DB.Models.SubModule", "SubModule")
                        .WithMany("Activities")
                        .HasForeignKey("SubModuleId");

                    b.HasOne("TimerTracker.BE.DB.Models.TypeShift", "TypeShift")
                        .WithMany("RecordActivity")
                        .HasForeignKey("TypeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Project");

                    b.Navigation("Shift");

                    b.Navigation("SubModule");

                    b.Navigation("TypeShift");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.Shift", b =>
                {
                    b.HasOne("TimerTracker.BE.DB.Models.Shift", null)
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftGuidId");

                    b.HasOne("TimerTracker.BE.DB.Models.TypeShift", "TypeShift")
                        .WithMany()
                        .HasForeignKey("TypeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeShift");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.SubModule", b =>
                {
                    b.HasOne("TimerTracker.BE.DB.Models.Project", "Project")
                        .WithMany("SubModules")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.HasOne("TimerTracker.BE.DB.Models.TypeShift", null)
                        .WithMany("TypeShifts")
                        .HasForeignKey("TypeShiftId");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.Activity", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.Project", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.Shift", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.SubModule", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimerTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.Navigation("RecordActivity");

                    b.Navigation("TypeShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
