// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTracker.BE.DB.DataAccess;

#nullable disable

namespace TimeTracker.BE.DB.Migrations
{
    [DbContext(typeof(MainDatacontext))]
    [Migration("20241111211121_InicializeCreate")]
    partial class InicializeCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Activities", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Start"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pause"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stop"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Project", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Project 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Project 2"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.RecordActivity", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Guid_ID");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("End_time");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.Property<Guid?>("ShiftGuidId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Shift_GuidID");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("Start_time");

                    b.Property<int?>("SubModuleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubModule_ID");

                    b.Property<int>("TypeShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.HasKey("GuidId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ShiftGuidId");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("TypeShiftId");

                    b.ToTable("Record_activities", "dbo");

                    b.HasData(
                        new
                        {
                            GuidId = new Guid("5ea88384-31f1-422d-b086-77dedb4de3aa"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("7183ca4c-6c37-4d1b-a24e-13437e2fe39f"),
                            ActivityId = 2,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("aba71af2-2219-43c4-a513-9a7f94710153"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("0342d781-30a9-4328-81f7-7d6e525c647b"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 11, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("8ca245d6-1e58-4848-a8fb-a7e7be622a35"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 2, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 2, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("ae4d84aa-dfdd-406b-bc48-cfa30e054d7d"),
                            ActivityId = 2,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 2, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("61d52308-c40d-42e5-abdb-dae7b3e04462"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("0e07c845-c37e-4d65-b274-f90bf3f958ed"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 11, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("83bbecee-704b-4803-a836-1702c4d6d37a"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 3, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 3, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("11f290da-514e-428e-b8cf-9ddb2e6df5ce"),
                            ActivityId = 2,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 3, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("3d7502ca-8882-4609-b07d-9a446067410a"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 3, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("fb7d3f47-324d-4c98-9aff-c8e09d9cf7e1"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 11, 3, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("4409696d-3110-483b-8817-050b4f1d6573"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 4, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 4, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("72604f82-773f-4b97-8016-f1d46c1e856f"),
                            ActivityId = 2,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 4, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 4, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("a5a074d6-7b83-4aae-9a0b-18a9f7d001d0"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 4, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 4, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("34095ca1-a950-46e6-89b6-1cf52014e61b"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 11, 4, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("86ea1e80-8a5c-45b1-b3ca-bc95c9627048"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 5, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("c4c8e4c3-048d-42dd-b662-292c020fd8b3"),
                            ActivityId = 2,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 5, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("5bf3f7f5-24af-40dc-a9a4-9be608a9973e"),
                            ActivityId = 1,
                            Description = "",
                            EndTime = new DateTime(2024, 11, 5, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 11, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("82dbfb00-7da6-42c3-a943-14876f310779"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 11, 5, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Guid_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShiftGuidId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Start_date");

                    b.Property<int>("TypeShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.HasKey("GuidId");

                    b.HasIndex("ShiftGuidId");

                    b.HasIndex("StartDate")
                        .IsUnique();

                    b.HasIndex("TypeShiftId");

                    b.ToTable("Shifts", "dbo", t =>
                        {
                            t.HasComment("Tabulka slouží k naplánování směny.");
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubModule_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("SubModule", "dbo");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisibleInMainWindow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("TypeShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeShiftId");

                    b.ToTable("TypeShifts", "dbo", t =>
                        {
                            t.HasComment("Tabulka všech možných směn.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Color = "SkyBlue",
                            IsVisibleInMainWindow = true,
                            Name = "HomeOffice"
                        },
                        new
                        {
                            Id = 1,
                            Color = "Orange",
                            IsVisibleInMainWindow = true,
                            Name = "Office"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Magenta",
                            IsVisibleInMainWindow = true,
                            Name = "Others"
                        },
                        new
                        {
                            Id = 4,
                            Color = "LawnGreen",
                            IsVisibleInMainWindow = false,
                            Name = "Holiday"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.RecordActivity", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Activity", "Activity")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTracker.BE.DB.Models.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TimeTracker.BE.DB.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftGuidId");

                    b.HasOne("TimeTracker.BE.DB.Models.SubModule", "SubModule")
                        .WithMany("Activities")
                        .HasForeignKey("SubModuleId");

                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", "TypeShift")
                        .WithMany("RecordActivity")
                        .HasForeignKey("TypeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Project");

                    b.Navigation("Shift");

                    b.Navigation("SubModule");

                    b.Navigation("TypeShift");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Shift", null)
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftGuidId");

                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", "TypeShift")
                        .WithMany()
                        .HasForeignKey("TypeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeShift");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Project", "Project")
                        .WithMany("SubModules")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", null)
                        .WithMany("TypeShifts")
                        .HasForeignKey("TypeShiftId");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Activity", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Project", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.Navigation("RecordActivity");

                    b.Navigation("TypeShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
