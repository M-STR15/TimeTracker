// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTracker.BE.DB.DataAccess;

#nullable disable

namespace TimeTracker.BE.DB.Migrations
{
    [DbContext(typeof(MainDatacontext))]
    partial class MainDatacontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Activities", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Start"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pause"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stop"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Project", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Project 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Project 2"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.RecordActivity", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Guid_ID");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.Property<Guid?>("ShiftGuidId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Shift_GuidID");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("Start_time");

                    b.Property<int?>("SubModuleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubModule_ID");

                    b.Property<int>("TypeShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.HasKey("GuidId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ShiftGuidId");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("TypeShiftId");

                    b.ToTable("Record_activities", "dbo");

                    b.HasData(
                        new
                        {
                            GuidId = new Guid("613fd0a1-2f54-4b61-a2e7-c66315b3135b"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("a43e22c9-960c-4d17-a619-76069ca5c85e"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("695f6463-0eda-48ee-b911-3f16225e71e4"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("2893acc4-fcdd-4b10-b48e-36abce20da1e"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("0b00655e-cf24-479d-9d02-c1597820ed06"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("077adf3c-0e3b-433f-81f7-567f52ace32c"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("b93fb740-b90a-4a2c-bedf-acd82edaa789"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("2e039f71-abe6-4452-950b-42b1cd7237f2"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("18da9692-0c9b-41f4-ac26-bdf09c4cba21"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("22abe4b8-8f9c-4c6f-a24a-2169061cad96"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("b236b601-f1af-4aeb-849d-0b046f6c195a"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("d16627ba-4542-4308-9003-ee31a0750706"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("c925ab6c-e5df-453e-9ef5-4e468f4f0c7b"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("c2dd8ac4-989f-47d8-8cc5-4b0573bc56ec"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("2465f517-b5d3-4dea-b45d-d8f26904711f"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("21d38036-bdff-45db-ac05-9a4f6a8e656f"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("9d3136b3-aff1-4290-b920-3bc765719d8f"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("276a60b0-47c9-48c3-a89d-a4a6a8db8599"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("fef8e4a5-208a-4377-b314-4638d78e545c"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("236b4b42-9d64-4302-9ade-3525d7018ca1"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Guid_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShiftGuidId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Start_date");

                    b.Property<int>("TypeShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.HasKey("GuidId");

                    b.HasIndex("ShiftGuidId");

                    b.HasIndex("StartDate")
                        .IsUnique();

                    b.HasIndex("TypeShiftId");

                    b.ToTable("Shifts", "dbo", t =>
                        {
                            t.HasComment("Tabulka slouží k naplánování směny.");
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubModule_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("SubModule", "dbo");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisibleInMainWindow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("TypeShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeShiftId");

                    b.ToTable("TypeShifts", "dbo", t =>
                        {
                            t.HasComment("Tabulka všech možných směn.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Color = "SkyBlue",
                            IsVisibleInMainWindow = true,
                            Name = "HomeOffice"
                        },
                        new
                        {
                            Id = 1,
                            Color = "Orange",
                            IsVisibleInMainWindow = true,
                            Name = "Office"
                        },
                        new
                        {
                            Id = 3,
                            Color = "MediumPurple",
                            IsVisibleInMainWindow = true,
                            Name = "Others"
                        },
                        new
                        {
                            Id = 4,
                            Color = "LawnGreen",
                            IsVisibleInMainWindow = false,
                            Name = "Holiday"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.RecordActivity", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Activity", "Activity")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTracker.BE.DB.Models.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TimeTracker.BE.DB.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftGuidId");

                    b.HasOne("TimeTracker.BE.DB.Models.SubModule", "SubModule")
                        .WithMany("Activities")
                        .HasForeignKey("SubModuleId");

                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", "TypeShift")
                        .WithMany("RecordActivity")
                        .HasForeignKey("TypeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Project");

                    b.Navigation("Shift");

                    b.Navigation("SubModule");

                    b.Navigation("TypeShift");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Shift", null)
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftGuidId");

                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", "TypeShift")
                        .WithMany()
                        .HasForeignKey("TypeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeShift");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Project", "Project")
                        .WithMany("SubModules")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", null)
                        .WithMany("TypeShifts")
                        .HasForeignKey("TypeShiftId");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Activity", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Project", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.Navigation("RecordActivity");

                    b.Navigation("TypeShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
