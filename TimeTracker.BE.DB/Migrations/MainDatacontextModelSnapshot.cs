// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTracker.BE.DB.DataAccess;

#nullable disable

namespace TimeTracker.BE.DB.Migrations
{
    [DbContext(typeof(MainDatacontext))]
    partial class MainDatacontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Activities", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Start"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pause"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stop"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Project", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Project 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Project 2"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.RecordActivity", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Guid_ID");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Activity_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.Property<Guid?>("ShiftGuidId")
                        .HasColumnType("TEXT")
                        .HasColumnName("Shift_GuidID");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("Start_time");

                    b.Property<int?>("SubModuleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubModule_ID");

                    b.Property<int>("TypeShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.HasKey("GuidId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ShiftGuidId");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("TypeShiftId");

                    b.ToTable("Record_activities", "dbo");

                    b.HasData(
                        new
                        {
                            GuidId = new Guid("0047df3a-8f44-4be7-8219-b65a71a64e10"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("02e27805-bc99-4bef-b240-9660a8ab7ff4"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("aeb0dc69-e3d4-4b76-92ea-3256df6c3e98"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("342fc221-8620-4616-8a3c-955d05e70f5c"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 1, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("0a329565-902b-4e60-9c0f-c6bf3704c222"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("c8b7e51c-45ee-4ed1-beb0-a4986b068d36"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("29710dea-aea5-4478-93a4-46af0c50d03e"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("aba18402-302f-4aa0-9e65-7b8ef8b8458f"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("61b42096-a2f4-4110-a1c4-9644a80d0e35"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("0768222d-92c1-4d46-88a9-3dafb0d7a0dd"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("30ad5a10-1d16-4528-8298-77c997d95a1d"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("a77d1158-9167-4852-ae58-33377d6c709e"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 3, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 1
                        },
                        new
                        {
                            GuidId = new Guid("ad594748-cd36-48aa-9a4f-1f21ec2c29f5"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("6dcc239c-226e-4107-936e-2b8017d03c8a"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("bf778a33-99ec-4077-9956-7a061f484eac"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("7c57b418-021f-4839-8eb2-f24296a2c973"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 4, 15, 10, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 2
                        },
                        new
                        {
                            GuidId = new Guid("f8298862-01d0-4d8d-b9fe-1ebe89961915"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("5de33f7b-7709-4cf6-9720-9e4f6af70cd3"),
                            ActivityId = 2,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 11, 40, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("54994f49-1959-4413-81c4-c0f8f70182ce"),
                            ActivityId = 1,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        },
                        new
                        {
                            GuidId = new Guid("a3dfebe2-c033-4172-8d87-d2915a01d49a"),
                            ActivityId = 3,
                            Description = "",
                            StartTime = new DateTime(2024, 10, 5, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeShiftId = 3
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.Property<Guid>("GuidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("Guid_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShiftGuidId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("Start_date");

                    b.Property<int>("TypeShiftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.HasKey("GuidId");

                    b.HasIndex("ShiftGuidId");

                    b.HasIndex("StartDate")
                        .IsUnique();

                    b.HasIndex("TypeShiftId");

                    b.ToTable("Shifts", "dbo", t =>
                        {
                            t.HasComment("Tabulka slouží k naplánování směny.");
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SubModule_ID");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_ID");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "Name")
                        .IsUnique();

                    b.ToTable("SubModule", "dbo");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TypeShift_ID");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisibleInMainWindow")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<int?>("TypeShiftId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeShiftId");

                    b.ToTable("TypeShifts", "dbo", t =>
                        {
                            t.HasComment("Tabulka všech možných směn.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Color = "SkyBlue",
                            IsVisibleInMainWindow = true,
                            Name = "HomeOffice"
                        },
                        new
                        {
                            Id = 1,
                            Color = "Orange",
                            IsVisibleInMainWindow = true,
                            Name = "Office"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Magenta",
                            IsVisibleInMainWindow = true,
                            Name = "Others"
                        },
                        new
                        {
                            Id = 4,
                            Color = "LawnGreen",
                            IsVisibleInMainWindow = false,
                            Name = "Holiday"
                        });
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.RecordActivity", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Activity", "Activity")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeTracker.BE.DB.Models.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId");

                    b.HasOne("TimeTracker.BE.DB.Models.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftGuidId");

                    b.HasOne("TimeTracker.BE.DB.Models.SubModule", "SubModule")
                        .WithMany("Activities")
                        .HasForeignKey("SubModuleId");

                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", "TypeShift")
                        .WithMany("RecordActivity")
                        .HasForeignKey("TypeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Project");

                    b.Navigation("Shift");

                    b.Navigation("SubModule");

                    b.Navigation("TypeShift");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Shift", null)
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftGuidId");

                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", "TypeShift")
                        .WithMany()
                        .HasForeignKey("TypeShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeShift");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.Project", "Project")
                        .WithMany("SubModules")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.HasOne("TimeTracker.BE.DB.Models.TypeShift", null)
                        .WithMany("TypeShifts")
                        .HasForeignKey("TypeShiftId");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Activity", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Project", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.Shift", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.SubModule", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TimeTracker.BE.DB.Models.TypeShift", b =>
                {
                    b.Navigation("RecordActivity");

                    b.Navigation("TypeShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
